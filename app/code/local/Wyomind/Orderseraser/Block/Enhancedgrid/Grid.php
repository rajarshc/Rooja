<?phpclass Wyomind_Orderseraser_Block_Enhancedgrid_Grid extends Mage_Adminhtml_Block_Widget_Grid{    public function __construct()    {        parent::__construct();        $this->setId('sales_order_grid');        $this->setUseAjax(true);        $this->setDefaultSort('created_at');        $this->setDefaultDir('DESC');        $this->setSaveParametersInSession(true);    }    /**     * Retrieve collection class     *     * @return string     */   public function getVersion(){   		return  substr(Mage::getVersion(),0,3);   }   	 protected function _prepareCollection()    {       	  	   if($this->getVersion()<=1.3){			$collection = Mage::getResourceModel('sales/order_collection')				->addAttributeToSelect('*')				->joinAttribute('billing_firstname', 'order_address/firstname', 'billing_address_id', null, 'left')				->joinAttribute('billing_lastname', 'order_address/lastname', 'billing_address_id', null, 'left')				->joinAttribute('shipping_firstname', 'order_address/firstname', 'shipping_address_id', null, 'left')				->joinAttribute('shipping_lastname', 'order_address/lastname', 'shipping_address_id', null, 'left')				->addExpressionAttributeToSelect('billing_name',					'CONCAT({{billing_firstname}}, " ", {{billing_lastname}})',					array('billing_firstname', 'billing_lastname'))				->addExpressionAttributeToSelect('shipping_name',					'CONCAT({{shipping_firstname}}, " ", {{shipping_lastname}})',					array('shipping_firstname', 'shipping_lastname'));		}		else $collection = Mage::getResourceModel($this->_getCollectionClass());		$this->setCollection($collection);		return parent::_prepareCollection();    }		protected function _getCollectionClass()    {        return 'sales/order_grid_collection';    }    	protected function _prepareColumns()    {        $this->addColumn('real_order_id', array(            'header'=> Mage::helper('sales')->__('Order #'),            'width' => '80px',            'type'  => 'text',            'index' => 'increment_id',        ));        if (!Mage::app()->isSingleStoreMode()) {            $this->addColumn('store_id', array(                'header'    => Mage::helper('sales')->__('Purchased From (Store)'),                'index'     => 'store_id',                'type'      => 'store',                'store_view'=> true,                'display_deleted' => true,            ));        }        $this->addColumn('created_at', array(            'header' => Mage::helper('sales')->__('Purchased On'),            'index' => 'created_at',            'type' => 'datetime',            'width' => '100px',        ));        $this->addColumn('billing_name', array(            'header' => Mage::helper('sales')->__('Bill to Name'),            'index' => 'billing_name',        ));        $this->addColumn('shipping_name', array(            'header' => Mage::helper('sales')->__('Ship to Name'),            'index' => 'shipping_name',        ));        $this->addColumn('base_grand_total', array(            'header' => Mage::helper('sales')->__('G.T. (Base)'),            'index' => 'base_grand_total',            'type'  => 'currency',            'currency' => 'base_currency_code',        ));        $this->addColumn('grand_total', array(            'header' => Mage::helper('sales')->__('G.T. (Purchased)'),            'index' => 'grand_total',            'type'  => 'currency',            'currency' => 'order_currency_code',        ));        $this->addColumn('status', array(            'header' => Mage::helper('sales')->__('Status'),            'index' => 'status',            'type'  => 'options',            'width' => '70px',            'options' => Mage::getSingleton('sales/order_config')->getStatuses(),        ));		$actions=array();		if (Mage::getSingleton('admin/session')->isAllowed('sales/order/actions/view')) {        	$actions[]= array(                            'caption' => Mage::helper('sales')->__('View'),                            'url'     => array('base'=>'*/sales_order/view'),                            'field'   => 'order_id'                        );             	}     	if (Mage::getSingleton('admin/session')->isAllowed('sales/order/actions/delete')) {        	$actions[]= array(                         'caption' => Mage::helper('sales')->__('Delete'),                         'url'     => array('base'=>'orderseraser/adminhtml_orderseraser/delete'),                         'confirm' => Mage::helper('sales')->__('Are your sure your want to delete this order and to erase all linked data ? '),                         'field'   => 'order_id'                        );     	}     	     	        $this->addColumn('action',                array(                    'header'    => Mage::helper('sales')->__('Action'),                    'width'     => '50px',                    'type'      => 'action',                    'getter'     => 'getId',                    'actions'   => $actions,                    'filter'    => false,                    'sortable'  => false,                    'index'     => 'stores',                    'is_system' => true,        ));                $this->addRssList('rss/order/new', Mage::helper('sales')->__('New Order RSS'));         if($this->getVersion()>1.3){       		 $this->addExportType('*/*/exportCsv', Mage::helper('sales')->__('CSV'));       		 $this->addExportType('*/*/exportExcel', Mage::helper('sales')->__('Excel'));         }	        return parent::_prepareColumns();    }    protected function _prepareMassaction()    {        $this->setMassactionIdField('entity_id');        $this->getMassactionBlock()->setFormFieldName('order_ids');        $this->getMassactionBlock()->setUseSelectAll(false);                if (Mage::getSingleton('admin/session')->isAllowed('sales/order/actions/delete')) {			$this->getMassactionBlock()->addItem('delete_order', array(	             'label'=> Mage::helper('sales')->__('Delete'),	             'url'  => $this->getUrl('orderseraser/adminhtml_orderseraser/massdelete'),	        ));        }        		if (Mage::getSingleton('admin/session')->isAllowed('sales/order/actions/cancel')) {            $this->getMassactionBlock()->addItem('cancel_order', array(                 'label'=> Mage::helper('sales')->__('Cancel'),                 'url'  => $this->getUrl('*/sales_order/massCancel'),            ));        }        if (Mage::getSingleton('admin/session')->isAllowed('sales/order/actions/hold')) {            $this->getMassactionBlock()->addItem('hold_order', array(                 'label'=> Mage::helper('sales')->__('Hold'),                 'url'  => $this->getUrl('*/sales_order/massHold'),            ));        }        if (Mage::getSingleton('admin/session')->isAllowed('sales/order/actions/unhold')) {            $this->getMassactionBlock()->addItem('unhold_order', array(                 'label'=> Mage::helper('sales')->__('Unhold'),                 'url'  => $this->getUrl('*/sales_order/massUnhold'),            ));        }		$this->getMassactionBlock()->addItem('shipexport_order', array(             'label'=> Mage::helper('sales')->__('Export Orders (Logistics)'),             'url'  => $this->getUrl('*/sales_order/exportlogistics'),        ));				        $this->getMassactionBlock()->addItem('pdfinvoices_order', array(             'label'=> Mage::helper('sales')->__('Print Invoices'),             'url'  => $this->getUrl('*/sales_order/pdfinvoices'),        ));        $this->getMassactionBlock()->addItem('pdfshipments_order', array(             'label'=> Mage::helper('sales')->__('Print Packingslips'),             'url'  => $this->getUrl('*/sales_order/pdfshipments'),        ));        $this->getMassactionBlock()->addItem('pdfcreditmemos_order', array(             'label'=> Mage::helper('sales')->__('Print Credit Memos'),             'url'  => $this->getUrl('*/sales_order/pdfcreditmemos'),        ));        $this->getMassactionBlock()->addItem('pdfdocs_order', array(             'label'=> Mage::helper('sales')->__('Print All'),             'url'  => $this->getUrl('*/sales_order/pdfdocs'),        ));        return $this;    }    public function getRowUrl($row)    {        if (Mage::getSingleton('admin/session')->isAllowed('sales/order/actions/view')) {            return $this->getUrl('*/sales_order/view', array('order_id' => $row->getId()));        }        return false;    }    public function getGridUrl()    {        return $this->getUrl('*/*/grid', array('_current'=>true));    }}